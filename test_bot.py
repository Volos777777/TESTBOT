#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞
"""

import os
import sys

def test_imports():
    """–¢–µ—Å—Ç—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏"""
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
        print("‚úÖ Telegram –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Telegram –±—ñ–±–ª—ñ–æ—Ç–µ–∫: {e}")
        return False
    
    try:
        import psycopg2
        print("‚úÖ psycopg2 —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É psycopg2: {e}")
        return False
    
    try:
        from database import init_db, save_user, save_contact
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ—É–Ω–∫—Ü—ñ–π –ë–î: {e}")
        return False
    
    return True

def test_environment():
    """–¢–µ—Å—Ç—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if token:
        print("‚úÖ TELEGRAM_BOT_TOKEN –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    db_url = os.getenv("DATABASE_URL")
    if db_url:
        print("‚úÖ DATABASE_URL –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return bool(token and db_url)

def test_files():
    """–¢–µ—Å—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤"""
    required_files = [
        "main.py",
        "database.py", 
        "broadcast.py",
        "requirements.txt"
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå {file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            missing_files.append(file)
    
    return len(missing_files) == 0

def main():
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞...\n")
    
    tests = [
        ("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤", test_imports),
        ("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞", test_environment),
        ("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤", test_files)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"üîç {test_name}:")
        try:
            result = test_func()
            results.append(result)
            print()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}\n")
            results.append(False)
    
    passed = sum(results)
    total = len(results)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    
    return passed == total

if __name__ == "__main__":
    main() 