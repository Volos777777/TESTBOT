import os
import signal
import logging
import time
import psycopg2
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, Conflict
from broadcast import broadcast
from database import init_db, load_users, save_user, update_subscription_status, update_blocked_status

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = "-1002834216129"  # ID –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
CHANNEL_LINK = "https://t.me/+ZzEgiQVCP6s2Y2Ji"  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª
DATABASE_URL = os.getenv("DATABASE_URL")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ä–µ–≥—ñ–æ–Ω—ñ–≤
def create_region_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ö–∏—ó–≤", url="https://t.me/+MAtbwy9ufGAwMzli"),
            InlineKeyboardButton("–î–Ω—ñ–ø—Ä–æ", url="https://t.me/+YvX-FzQHpU1kNGZi"),
            InlineKeyboardButton("–•–∞—Ä–∫—ñ–≤", url="https://t.me/+kanHOVAz99FlODYy")
        ],
        [
            InlineKeyboardButton("–û–¥–µ—Å–∞", url="https://t.me/+FyKju8C82b43OGEy"),
            InlineKeyboardButton("–õ—å–≤—ñ–≤", url="https://t.me/+rbesn-FqWKkxMDFi")
        ],
        [
            InlineKeyboardButton("–Ü–Ω—à—ñ —Ä–µ–≥—ñ–æ–Ω–∏", callback_data="other_regions")
        ]
    ])

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    save_user(
        user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code
    )
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user.id)
        if member.status in ['member', 'administrator', 'creator']:
            update_subscription_status(user.id, True)
            await update.message.reply_text(
                "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —Ä–µ–≥—ñ–æ–Ω:",
                reply_markup=create_region_keyboard()
            )
            return
    except TelegramError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {str(e)}")
    
    # –Ø–∫—â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    keyboard = [[InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è (–ª–∞—Å—å)", callback_data="subscribe")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ @zaletilo_bot!\n\n"
        f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É: {CHANNEL_LINK}",
        reply_markup=reply_markup
    )
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Ö–≤–∏–ª–∏–Ω–∏ (180 —Å–µ–∫—É–Ω–¥)
    context.job_queue.run_once(remind_to_subscribe, 180, data={'chat_id': update.message.chat_id, 'user_id': user.id}, name=str(user.id))

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É
async def remind_to_subscribe(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data['chat_id']
    user_id = context.job.data['user_id']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ
    except TelegramError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
        return

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    keyboard = [[InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=CHANNEL_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id,
        text="–°—Ö–æ–∂–µ, —Ö—Ç–æ—Å—å –∑–∞—Å–Ω—É–≤ —ñ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üò¥, –ø–æ—Å–ø—ñ—à–∏ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
        reply_markup=reply_markup
    )
    logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "subscribe":
        try:
            member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID}: {member.status}")
            if member.status in ['member', 'administrator', 'creator']:
                update_subscription_status(user_id, True)
                await query.message.reply_text(
                    "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —Ä–µ–≥—ñ–æ–Ω:",
                    reply_markup=create_region_keyboard()
                )
            else:
                keyboard = [[InlineKeyboardButton "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=CHANNEL_LINK)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.reply_text(
                    "–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏!\n\n"
                    f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É: {CHANNEL_LINK}",
                    reply_markup=reply_markup
                )
        except TelegramError as e:
            if "not enough rights" in str(e).lower() or "unauthorized" in str(e).lower():
                logger.error(f"–ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
                await query.message.reply_text(
                    "–ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
                await query.message.reply_text(
                    "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏.\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
        except Exception as e:
            logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
            await query.message.reply_text(
                "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏.\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    
    elif query.data == "other_regions":
        try:
            logger.info(f"–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–Ü–Ω—à—ñ —Ä–µ–≥—ñ–æ–Ω–∏' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            region_urls = {
                "–ó–∞–ø–æ—Ä—ñ–∂–∂—è": "https://t.me/+XE-XiYnCSOwwYzAy",
                "–í—ñ–Ω–Ω–∏—Ü—è": "https://t.me/+TsEar0CH3z0wYzQy",
                "–ü–æ–ª—Ç–∞–≤–∞": "https://t.me/+cQcCFMOlQ6dkMWQy",
                "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "https://t.me/+KPOzzkb_B4RhNjU6",
                "–ß–µ—Ä–∫–∞—Å–∏": "https://t.me/+6d_cW6rKyrU0MDE6",
                "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π": "https://t.me/+2ZktT_xJXd81NTJi",
                "–ñ–∏—Ç–æ–º–∏—Ä": "https://t.me/+-X78W7iXLkMzZTgy",
                "–°—É–º–∏": "https://t.me/+f0P0ATKrmB5lYTli",
                "–†—ñ–≤–Ω–µ": "https://t.me/+FaswQkcAfw5jNTli",
                "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫": "https://t.me/+hqOtVtNY41tkYjMy",
            }
            keyboard = [[InlineKeyboardButton(city, url=url) for city, url in region_urls.items()]]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º—ñ—Å—Ç", callback_data="main_cities")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä–µ–≥—ñ–æ–Ω:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ '–Ü–Ω—à—ñ —Ä–µ–≥—ñ–æ–Ω–∏' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
            await query.message.reply_text(
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    
    elif query.data == "main_cities":
        try:
            await query.edit_message_text(
                "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —Ä–µ–≥—ñ–æ–Ω:",
                reply_markup=create_region_keyboard()
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º—ñ—Å—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")
            await query.message.reply_text(
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    admin_id = 293102975
    if user_id != admin_id:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    conn = None
    try:
        if DATABASE_URL:
            conn = psycopg2.connect(DATABASE_URL)
        else:
            conn = psycopg2.connect(
                dbname=os.getenv("PGDATABASE"),
                user=os.getenv("PGUSER"),
                password=os.getenv("PGPASSWORD"),
                host=os.getenv("PGHOST"),
                port=os.getenv("PGPORT")
            )
        
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE is_subscribed = TRUE AND is_blocked = FALSE")
        subscribed_users = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE is_blocked = TRUE")
        blocked_users = cur.fetchone()[0]
        
        await update.message.reply_text(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {total_users}\n"
            f"–ü—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫–∞–Ω–∞–ª: {subscribed_users}\n"
            f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users}"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        if conn:
            conn.close()

# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
def signal_handler(sig, frame):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, –≤–∏–º–∏–∫–∞—é –±–æ—Ç–∞...")
    os._exit(0)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        exit(1)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    init_db()

    application = (Application.builder()
                  .token(TOKEN)
                  .get_updates_read_timeout(30)
                  .get_updates_write_timeout(30)
                  .get_updates_connect_timeout(30)
                  .get_updates_pool_timeout(30)
                  .build())

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(button_callback))

    max_retries = 3
    for attempt in range(max_retries):
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}")
            if attempt > 0:
                logger.info("–ß–µ–∫–∞—é –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                time.sleep(10 + attempt * 5)
            application.run_polling(drop_pending_updates=True)
            break
        except Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª—ñ–∫—Ç —ñ–∑ —ñ–Ω—à–æ—é —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—î—é –±–æ—Ç–∞ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                logger.error(f"–ß–µ–∫–∞—é {15 + attempt * 10} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                time.sleep(15 + attempt * 10)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                time.sleep(5)
            else:
                break
    else:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±.")
        exit(1)
